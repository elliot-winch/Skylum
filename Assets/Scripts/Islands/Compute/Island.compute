#pragma kernel Island

#include "Field.compute"

struct Point 
{
    float x;
    float y;
};

float girth;
uint numKeypoints;
RWStructuredBuffer<Point> Keypoints;

float inverseLerp(float a, float b, float p)
{
    return (p - a) / (b - a);
}

float radiusAtHeight(float relativeHeight)
{
    for(uint i = 1; i < numKeypoints; i++)
    {
        Point a = Keypoints[i - 1];
        Point b = Keypoints[i];
        float t = inverseLerp(a.x, b.x, relativeHeight);

        if(t >= 0 && t <= 1)
        {
            return lerp(a.y, b.y, t);
        }
    }
    return 0;
}

[numthreads(8, 8, 8)]
void Island(uint3 id : SV_DispatchThreadID)
{
    float3 pos = posFromID(id);
    float radius = length(float3(pos.x, 0, pos.z));
    float value = pos.y + pos.x + pos.z * 2; //1 - radius; //radiusAtHeight(pos.y) - radius;
    Voxels[indexFromID(id)] = value;
}
