// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel World

#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise3D.hlsl"

#include "Field.compute"

struct Island
{
	float4 base;
	float4 tip;
};

//Noise incuded here as it didn't work in a separate file
struct NoiseParameters 
{
    int octaves;
    float startingFrequency;
    float frequencyStep;
    float startingAmplitude;
    float amplitudeStep;
    float4 noiseOffset;
};

RWStructuredBuffer<NoiseParameters> noiseParameters;
uint numIslands;
RWStructuredBuffer<Island> islands;

uint numSamples;
RWStructuredBuffer<float> islandShapeSamples;

float addNoise(float3 pos, NoiseParameters parameters)
{
    float noise = 0;
    float frequency = parameters.startingFrequency;
    float amplitude = parameters.startingAmplitude;

    for (int j = 0; j < parameters.octaves; j++) 
    {
        float3 noisePos = pos + parameters.noiseOffset.xyz;
        float normalisedNoises = ClassicNoise(noisePos * frequency);
        noise += normalisedNoises * amplitude;
        amplitude *= parameters.amplitudeStep;
        frequency *= parameters.frequencyStep;
    }

    return noise;
}

float islandValue(float3 pos)
{
	float maxIslandValue = -1000;
	for(uint i = 0; i < numIslands; i++)
	{
        float3 base = islands[i].base.xyz;
        float3 tip = islands[i].tip.xyz;

        float3 islandAxis = tip - base;
        float3 relativePosition = (pos - base) / length(islandAxis);

        float relativeHeight = dot(islandAxis, relativePosition) / length(islandAxis);
        
        float3 positionAlongVector = lerp(base, tip, relativeHeight);
        
        int sampleIndex = floor(relativeHeight * numSamples);
        if(sampleIndex < 0 || sampleIndex >= numSamples)
        {
            continue;
        }
        
        float distanceFromIslandAxis = length(pos - positionAlongVector);
        float islandSizeAtHeight = islandShapeSamples[sampleIndex];
		float value = islandSizeAtHeight - distanceFromIslandAxis;

		maxIslandValue = max(value, maxIslandValue);
	}
	return maxIslandValue;
}

[numthreads(8,8,8)]
void World (uint3 id : SV_DispatchThreadID)
{
	float3 pos = posFromID(id);

	float backgroundFieldValue = addNoise(pos, noiseParameters[0]);
	float islandFieldValue = islandValue(pos);

    Voxels[indexFromID(id)] = islandFieldValue - backgroundFieldValue;
}
